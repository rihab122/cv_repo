#define LED_GREEN_PIN 6
#define LED_YELLOW_PIN 9
#define LED_BLUE_PIN 10
#define LED_RED_PIN 11

#define BUTTON_GREEN_PIN 2
#define BUTTON_YELLOW_PIN 3
#define BUTTON_BLUE_PIN 4
#define BUTTON_RED_PIN 12

#define BUZZER_PIN 5

#define TOTAL_LEDS 4
#define CHOSEN_LEDS 3

int ledPins[TOTAL_LEDS] = {LED_GREEN_PIN, LED_YELLOW_PIN, LED_BLUE_PIN, LED_RED_PIN};
int buttonPins[TOTAL_LEDS] = {BUTTON_GREEN_PIN, BUTTON_YELLOW_PIN, BUTTON_BLUE_PIN, BUTTON_RED_PIN}; 
int chosenLedIndices[CHOSEN_LEDS];
int pressedButtonIndices[CHOSEN_LEDS];
int pressedButtonCount = 0;
unsigned long gameStartTime;
unsigned long firstButtonPressTime;
bool isGameStarted = false;
bool isGameEnded = false;

#define VICTORY_TONE 1000
#define FAILURE_TONE 500

void setup() {
  initializePins();
  randomSeed(analogRead(A1));
}
void loop() {
  manageGameState();
}
void initializePins() {
  for (int i = 0; i < TOTAL_LEDS; i++) {
    pinMode(ledPins[i], OUTPUT);
    pinMode(buttonPins[i], INPUT_PULLUP);
  }
  pinMode(BUZZER_PIN, OUTPUT);
}

void manageGameState() {
  if (isGameEnded) {
    checkForNewGameStart();
  } else if (!isGameStarted) {
    startNewGame();
  } else {
    playGame();
  }
}

void startNewGame() {
  resetGame();
  pickRandomLeds();
  signalStart();
}
void resetGame() {
  pressedButtonCount = 0;
  isGameStarted = true;
  isGameEnded = false;
  turnOffAllLeds();
}

void pickRandomLeds() {
  for (int i = 0; i < CHOSEN_LEDS; i++) {
    chosenLedIndices[i] = random(TOTAL_LEDS);
    digitalWrite(ledPins[chosenLedIndices[i]], HIGH);
    delay(1000); 
    digitalWrite(ledPins[chosenLedIndices[i]], LOW);
    delay(100); 
  }
  delay(500); // 
}
void signalStart() {
  tone(BUZZER_PIN, VICTORY_TONE, 100);
  delay(150);
}

void playGame() {
  int pressedButton = getPressedButton();
  if (pressedButton > -1) {
    if (pressedButtonCount == 0) {
      firstButtonPressTime = millis();
    }
    handleButtonPress(pressedButton);
  }
  evaluateGameState();

int getPressedButton() {
  for (int i = 0; i < TOTAL_LEDS; i++) {
    if (digitalRead(buttonPins[i]) == LOW) {
      return i;
    }
  }
  return -1;
}

void handleButtonPress(int buttonIndex) {
  pressedButtonIndices[pressedButtonCount] = buttonIndex;
  pressedButtonCount++;

  if (pressedButtonCount <= CHOSEN_LEDS && buttonIndex == chosenLedIndices[pressedButtonCount - 1]) {
    digitalWrite(ledPins[buttonIndex], HIGH);
    delay(500); // ה-LED נדלק אם יש התאמה
    digitalWrite(ledPins[buttonIndex], LOW);
  } else {
    indicateFailure();
    resetGame();
    return;
  }

  if (pressedButtonCount == CHOSEN_LEDS) {
    unsigned long elapsedTime = millis() - firstButtonPressTime;
    if (elapsedTime <= 1000) {
      indicateVictory();
    } else {
      indicateFailure();
    }
    resetGame();
  }
void handleButtonPress(int buttonIndex) {
  pressedButtonIndices[pressedButtonCount] = buttonIndex;
  pressedButtonCount++;

  if (pressedButtonCount <= CHOSEN_LEDS && buttonIndex == chosenLedIndices[pressedButtonCount - 1]) {
    digitalWrite(ledPins[buttonIndex], HIGH);
    delay(500); // ה-LED נדלק אם יש התאמה
    digitalWrite(ledPins[buttonIndex], LOW);
  } else {
    indicateFailure();
    resetGame();
    return;
  }

  if (pressedButtonCount == CHOSEN_LEDS) {
    unsigned long elapsedTime = millis() - firstButtonPressTime;
    if (elapsedTime <= 1000) {
      indicateVictory();
    } else {
      indicateFailure();
    }
    resetGame();
  }

void indicateVictory() {
  tone(BUZZER_PIN, VICTORY_TONE, 500);
  digitalWrite(LED_GREEN_PIN, HIGH);
  delay(10000); // הלד הירוק נדלק למשך 10 שניות
  digitalWrite(LED_GREEN_PIN, LOW);
  isGameEnded = true;
}
